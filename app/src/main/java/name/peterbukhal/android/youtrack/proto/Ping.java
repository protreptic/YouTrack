// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: YouTrack.proto at 7:1
package name.peterbukhal.android.youtrack.proto;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Float;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

public final class Ping extends Message<Ping, Ping.Builder> {
  public static final ProtoAdapter<Ping> ADAPTER = new ProtoAdapter_Ping();

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_PROVIDER = "";

  public static final Long DEFAULT_TIME = 0L;

  public static final Double DEFAULT_LATITUDE = 0.0d;

  public static final Double DEFAULT_LONGITUDE = 0.0d;

  public static final Double DEFAULT_ALTITUDE = 0.0d;

  public static final Float DEFAULT_SPEED = 0.0f;

  public static final Float DEFAULT_BEARING = 0.0f;

  public static final Float DEFAULT_ACCURACY = 0.0f;

  public static final String DEFAULT_UID = "";

  public static final Boolean DEFAULT_MOCK = false;

  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String provider;

  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#INT64"
  )
  public final Long time;

  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#DOUBLE"
  )
  public final Double latitude;

  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#DOUBLE"
  )
  public final Double longitude;

  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#DOUBLE"
  )
  public final Double altitude;

  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#FLOAT"
  )
  public final Float speed;

  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#FLOAT"
  )
  public final Float bearing;

  @WireField(
      tag = 8,
      adapter = "com.squareup.wire.ProtoAdapter#FLOAT"
  )
  public final Float accuracy;

  @WireField(
      tag = 9,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String uid;

  @WireField(
      tag = 10,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  public final Boolean mock;

  public Ping(String provider, Long time, Double latitude, Double longitude, Double altitude, Float speed, Float bearing, Float accuracy, String uid, Boolean mock) {
    this(provider, time, latitude, longitude, altitude, speed, bearing, accuracy, uid, mock, ByteString.EMPTY);
  }

  public Ping(String provider, Long time, Double latitude, Double longitude, Double altitude, Float speed, Float bearing, Float accuracy, String uid, Boolean mock, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.provider = provider;
    this.time = time;
    this.latitude = latitude;
    this.longitude = longitude;
    this.altitude = altitude;
    this.speed = speed;
    this.bearing = bearing;
    this.accuracy = accuracy;
    this.uid = uid;
    this.mock = mock;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.provider = provider;
    builder.time = time;
    builder.latitude = latitude;
    builder.longitude = longitude;
    builder.altitude = altitude;
    builder.speed = speed;
    builder.bearing = bearing;
    builder.accuracy = accuracy;
    builder.uid = uid;
    builder.mock = mock;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof Ping)) return false;
    Ping o = (Ping) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(provider, o.provider)
        && Internal.equals(time, o.time)
        && Internal.equals(latitude, o.latitude)
        && Internal.equals(longitude, o.longitude)
        && Internal.equals(altitude, o.altitude)
        && Internal.equals(speed, o.speed)
        && Internal.equals(bearing, o.bearing)
        && Internal.equals(accuracy, o.accuracy)
        && Internal.equals(uid, o.uid)
        && Internal.equals(mock, o.mock);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (provider != null ? provider.hashCode() : 0);
      result = result * 37 + (time != null ? time.hashCode() : 0);
      result = result * 37 + (latitude != null ? latitude.hashCode() : 0);
      result = result * 37 + (longitude != null ? longitude.hashCode() : 0);
      result = result * 37 + (altitude != null ? altitude.hashCode() : 0);
      result = result * 37 + (speed != null ? speed.hashCode() : 0);
      result = result * 37 + (bearing != null ? bearing.hashCode() : 0);
      result = result * 37 + (accuracy != null ? accuracy.hashCode() : 0);
      result = result * 37 + (uid != null ? uid.hashCode() : 0);
      result = result * 37 + (mock != null ? mock.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (provider != null) builder.append(", provider=").append(provider);
    if (time != null) builder.append(", time=").append(time);
    if (latitude != null) builder.append(", latitude=").append(latitude);
    if (longitude != null) builder.append(", longitude=").append(longitude);
    if (altitude != null) builder.append(", altitude=").append(altitude);
    if (speed != null) builder.append(", speed=").append(speed);
    if (bearing != null) builder.append(", bearing=").append(bearing);
    if (accuracy != null) builder.append(", accuracy=").append(accuracy);
    if (uid != null) builder.append(", uid=").append(uid);
    if (mock != null) builder.append(", mock=").append(mock);
    return builder.replace(0, 2, "Ping{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<Ping, Builder> {
    public String provider;

    public Long time;

    public Double latitude;

    public Double longitude;

    public Double altitude;

    public Float speed;

    public Float bearing;

    public Float accuracy;

    public String uid;

    public Boolean mock;

    public Builder() {
    }

    public Builder provider(String provider) {
      this.provider = provider;
      return this;
    }

    public Builder time(Long time) {
      this.time = time;
      return this;
    }

    public Builder latitude(Double latitude) {
      this.latitude = latitude;
      return this;
    }

    public Builder longitude(Double longitude) {
      this.longitude = longitude;
      return this;
    }

    public Builder altitude(Double altitude) {
      this.altitude = altitude;
      return this;
    }

    public Builder speed(Float speed) {
      this.speed = speed;
      return this;
    }

    public Builder bearing(Float bearing) {
      this.bearing = bearing;
      return this;
    }

    public Builder accuracy(Float accuracy) {
      this.accuracy = accuracy;
      return this;
    }

    public Builder uid(String uid) {
      this.uid = uid;
      return this;
    }

    public Builder mock(Boolean mock) {
      this.mock = mock;
      return this;
    }

    @Override
    public Ping build() {
      return new Ping(provider, time, latitude, longitude, altitude, speed, bearing, accuracy, uid, mock, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_Ping extends ProtoAdapter<Ping> {
    ProtoAdapter_Ping() {
      super(FieldEncoding.LENGTH_DELIMITED, Ping.class);
    }

    @Override
    public int encodedSize(Ping value) {
      return (value.provider != null ? ProtoAdapter.STRING.encodedSizeWithTag(1, value.provider) : 0)
          + (value.time != null ? ProtoAdapter.INT64.encodedSizeWithTag(2, value.time) : 0)
          + (value.latitude != null ? ProtoAdapter.DOUBLE.encodedSizeWithTag(3, value.latitude) : 0)
          + (value.longitude != null ? ProtoAdapter.DOUBLE.encodedSizeWithTag(4, value.longitude) : 0)
          + (value.altitude != null ? ProtoAdapter.DOUBLE.encodedSizeWithTag(5, value.altitude) : 0)
          + (value.speed != null ? ProtoAdapter.FLOAT.encodedSizeWithTag(6, value.speed) : 0)
          + (value.bearing != null ? ProtoAdapter.FLOAT.encodedSizeWithTag(7, value.bearing) : 0)
          + (value.accuracy != null ? ProtoAdapter.FLOAT.encodedSizeWithTag(8, value.accuracy) : 0)
          + (value.uid != null ? ProtoAdapter.STRING.encodedSizeWithTag(9, value.uid) : 0)
          + (value.mock != null ? ProtoAdapter.BOOL.encodedSizeWithTag(10, value.mock) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, Ping value) throws IOException {
      if (value.provider != null) ProtoAdapter.STRING.encodeWithTag(writer, 1, value.provider);
      if (value.time != null) ProtoAdapter.INT64.encodeWithTag(writer, 2, value.time);
      if (value.latitude != null) ProtoAdapter.DOUBLE.encodeWithTag(writer, 3, value.latitude);
      if (value.longitude != null) ProtoAdapter.DOUBLE.encodeWithTag(writer, 4, value.longitude);
      if (value.altitude != null) ProtoAdapter.DOUBLE.encodeWithTag(writer, 5, value.altitude);
      if (value.speed != null) ProtoAdapter.FLOAT.encodeWithTag(writer, 6, value.speed);
      if (value.bearing != null) ProtoAdapter.FLOAT.encodeWithTag(writer, 7, value.bearing);
      if (value.accuracy != null) ProtoAdapter.FLOAT.encodeWithTag(writer, 8, value.accuracy);
      if (value.uid != null) ProtoAdapter.STRING.encodeWithTag(writer, 9, value.uid);
      if (value.mock != null) ProtoAdapter.BOOL.encodeWithTag(writer, 10, value.mock);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public Ping decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.provider(ProtoAdapter.STRING.decode(reader)); break;
          case 2: builder.time(ProtoAdapter.INT64.decode(reader)); break;
          case 3: builder.latitude(ProtoAdapter.DOUBLE.decode(reader)); break;
          case 4: builder.longitude(ProtoAdapter.DOUBLE.decode(reader)); break;
          case 5: builder.altitude(ProtoAdapter.DOUBLE.decode(reader)); break;
          case 6: builder.speed(ProtoAdapter.FLOAT.decode(reader)); break;
          case 7: builder.bearing(ProtoAdapter.FLOAT.decode(reader)); break;
          case 8: builder.accuracy(ProtoAdapter.FLOAT.decode(reader)); break;
          case 9: builder.uid(ProtoAdapter.STRING.decode(reader)); break;
          case 10: builder.mock(ProtoAdapter.BOOL.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public Ping redact(Ping value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
